================================================================
==    ADVANCED ASSEMBLY LANGUAGE SPECIFICATION VERSION 0.4    ==
================================================================

----
I. Preface

  Advanced Assembly is a programming language that roughly resembles an assembly programming language. However, unlike standard assembly languages, Advanced Assembly is not designed to be run on a specific processor. Instead, it has been designed so that any series of bits--any combination of "1" and "0"--is a valid program.
  Advanced Assembly discards the conventional grouping of eight bits into a byte; instead, bits are divided into groups of arbitrary length. This makes it impossible to run an Advanced Assembly program directly on a processor, but allows instructions to be packed much more densely. Therefore, Advanced Assembly programs must be run in an interpreter. The official Advanced Assembly interpreter, programmed in Haskell, should be included with this document.
  During early stages of development, Advanced Assembly was called High Level Binary and  was intended to be able to express a diverse range of paradigms found in high level programming languages. However, as development progressed, it became apparent that such paradigms lead to a complex and convoluted syntax. In order to simplify the syntax, all complex paradigms that could be easily implemented through simpler paradigms were removed.
  When the first complete language specification was planned out, High Level Binary no longer represented the "high level" programming languages it was originally intended to emulate; instead, the programming language appeared to be a permutation of a typical assembly language. Therefore, the decision was made to rename the language Advanced Assembly to indicate that it facilitated a different feature set than standard assembly languages while distancing the association with the more advanced high level programming languages.
  Advanced Assembly's simplification led to the removal of several essential features. These features, such as the Object Oriented Programming paradigm, will therefore be provided as "extensions." Separate specification documents will be drafted that define how these features are to work and a reference implementation of them shall be created solely using Advanced Assembly code. Therefore in a program where one of these features is desired, the extension can be used by invoking the extension as one of the first actions of a program. All subsequent statements will than have access to the now-loaded extension's feature set. As of the writing of this document, no extensions have been drafted or implemented.
  
----
II. Table of Contents

  I.             Preface
  II.            Table of Contents
  III.           Notation
   A.             Opcodes
   B.             Conceptual Opcodes
  IV.            Strings
  V.             Data Types
   A.             Integers
   B.             Floats
  VI.            Namespaces
  VII.           Statements
   A.             Literal Statements
   B.             Functional Statements
    1.             Namespace Statements
    2.             Mathematical Statements
  VIII.          Actions
  IX.            Program Control Flow

  Appendix A.    Opcodes
  Appendix B.    Conceptual Opcodes
  Appendix C.    Compiler Notes
  Appendix D.    Memory Management Notes

----
III. Notation

  Advanced Assembly programs consist of a series of bits. A bit, the simplest unit of information, can either be true or false. Throughout this document it is understood that "1" and "0" refer to a single bit with a value of true and false, respectively. All other Arabic numerals are understood to be referring to their standard numeric value. If a "1" or "0" is used with other Arabic numerals, it is understood that the "1" or "0" represents its standard numeric value--not a bit.
  Under some circumstances, expressing numbers (such as one hundred) in Arabic numerals will only use the symbols "1" and "0". In such cases, the number will be written out ("one hundred"). Therefore, if "100" is encountered it is understood that "100" is referring to three, sequential bits with values of true, false, and false, respectively.

Examples:
     0  Refers to a bit with a value of true
     8  Refers to the number eight
    10  Refers to two, sequential bits with values of true and false respectively
    15  Refers to the number fifteen
  1425  Refers to the number one thousand, four hundred, twenty-five
  1001  Refers to four, sequential bits with values of true, false, false, and true respectively

NOTE: In other documents, series of bits may be grouped into sets of four and expressed in hexadecimal--allowing two hexadecimal digits to express the value of a byte. However, since Advanced Assembly does not group bits into larger groups of regular size, this notation will not be used. Whenever series of bits are to be expressed, they will be expressed using "1" and "0".

A. Opcodes

  This document explicitly specifies how combinations of true and false bits can be interpretted to produce a desired effect. However, notating a bit as "0" or "1" can become confusing and the same combinations of bits can mean different things depending on where they are. Therefore, when defining various functions, bit patterns will be expressed via several character mnemonics. Each mnemonic is translates directly into a corresponding series of bits (see Appendix A) and provides additional context--making a program easier to read and understand. These mnemonics are referred to as opcodes.
  An assembler (written in Python) should be included with this document. The assembler will take a text file consisting of "1", "0", and the opcodes defined in this document and translate the text file into a binary file whose bits correspond with the text file.

B. Conceptual Opcodes

  In Advanced Assembly, groups of opcodes are used in conjunction with arbitrary series of bits in predictable patterns to express complex concepts than a single opcode. These concepts, such as strings, often come up in multiple places throughout the specification where it is more meaningful to refer to the concepts by a short mnemonic than it is to refer to the concepts by their constituent parts. These mnemonics are collectively referred to as "Conceptual Opcodes" because they refer to concepts instead of a specific series of bits. Conceptual opcodes are used within this document for clarity and cannot be used by a programmer to write Advanced Assembly code. Conceptual Opcodes are defined throughout the specification and a complete list can be found in Appendix B.

----
IV. Strings

  In Advanced Assembly, a string refers to a series of bits with a length of zero or a positive multiple of four. A string is the fundamental structure of Advanced Assembly and is notated using the conceptual opcode "STRING." A string consists of the opcode CS (1) followed by four arbitrary bits. This pattern is repeated as many times as necessary in order to convey the desired string. The end of a string is indicated by the opcode ES (0) after the CS opcode and four bits pattern.  A string consisting solely of an ES opcode will have a length of zero and no defined value. It is important to note that a string refers to the collection of bits notated and does not include the CS and ES - the opcodes are used for notating a string literally within a program. However, when a program manipulates a string the manipulation refers to the notated bits and if a statement evaluates to a string, the string does not include the CS and ES opcodes.

Examples:
  ES                                      A string with a length of zero and no defined value
  CS 1001 ES                              A string with a length of four and a value of 1001
  CS 0001 CS 0010 CS 0100 CS 1000 ES      A string with a length of 16 and a value of 0001001001001000

----
V. Data Types

  All data within Advanced Assembly can be grouped into three data types: strings, integers, and floats. Several aspects of the program, such as the program's code and namespaces (see section VI) are stored as strings and can be manipulated as such. Numerical data is typically stored as either an integer or a float. Note that strings, integers, and floats are fully interchangeable.
  Under some circumstances, data must be interpreted in a boolean matter (true or false). In Advanced Assembly, the boolean value for false is an empty string, an integer equal to zero, and a float equal to zero. Any other value is considered true.

A. Integer

  An integer is just what it sounds like: an integer. It is represented by the conceptual opcode INT. An integer consists of one bit followed by a string. The string represents the integer's value and is interpreted in a little-endian style. Therefore, the first group of four bits represents the eight, four, two, and one place values respectively; the second group of four bits represents the one hundred twenty-eight, sixty-four, thirty-two, and sixteen place values respectively; and so on and so forth. The first bit (before the STRING) is the sign bit. If it is 0, then the string integer value is determined as previously outlined. If it is 1, then the integer is negative, and the string integer value is its two's compliment: the positive value of the integer is calculated by replacing every 1 with 0 and vice versa and then incrementing the resulting integer.
  When converting a string to an integer, the first bit of the string is used as the sign bit and all subsequent bits are interpreted as the string. If the interpreted string's length is not a multiple of four, then a 0 is added to the string in the location where it would be the most significant bit. This is repeated until the string's length is a multiple of four. When converting an integer to a string, the sign bit is prepended to integer's string component and the resulting string is considered the integer's string value.

Examples:
  0 ES                                       An integer with a value of one
  0 CS 1001 CS 0001 ES                       An integer with a value of 25
  0 CS 0000 CS 0000 CS 0000 CS 0010 ES       An integer with a value of 8192
  1 ES                                       An integer with a value of negative one
  1 CS 1110 ES                               An integer with a value of negative two
  1 CS 1111 CS 1000 ES                       An integer with a value of negative 113

B. Float

  A float is used to represent numbers that are not integers. A float is represented by the conceptual opcode FLOAT. A float consists of two integers, known as the "mantissa" and "exponent" respectively. The value of a float is determined by multiplying the mantissa by two raised to the power of the exponent. The sign of the mantissa determines the sign of the float while the sign of the exponent helps determine the magnitude of the float.
  When converting a float to an integer, the integer is initially set to the value of the mantissa. Then, the string component of the integer is augmented such that the resulting integer's magnitude is the same as the float's. If the float's exponent is positive, a number of "0"'s equal to the float's exponent is inserted into the integer's least significant digit shifting all other digits into more significant place values. If the float's exponent is negative, then the integer's least significant digit is removed an amount equal to the exponent's absolute value. Each time the least significant digit is removed, all other digits are shifted into less significant place values. If, at any point, the entire string component of the integer is removed and more digits still need to be removed, the remaining digits to be removed are to be discarded and the integer's string component set to "0000". When converting an integer into a float, the float's mantissa is set to the integer and the float's exponent is set to zero.
  When converting a string into a float, the string is divided in two. The first half of the string becomes the mantissa and the second half becomes the exponent; each string is converted to an integer via the process outlined in Section IV.B. If the string's length is odd, then the it is divided into two such that the exponent's section is one bit longer than the mantissa's section. When converting a float into a string, then both the mantissa and exponent are converted to strings and the resulting string is the string form of the exponent appended to the string form of the mantissa.

Examples:
  0 ES 0 ES                      A float with a value of zero
  0 CS 0001 ES 0 CS 1000 ES      A float with a value of 256
  1 CS 1111 ES 0 ES              A float with a value of negative one
  1 CS 0000 ES 0 CS 1010 ES      A float with a value of negative 16384
  0 CS 1010 ES 1 CS 1110 ES      A float with a value of 2.5
  0 CS 0101 ES 1 CS 1000 ES      A float with a value of 0.01953125
  1 CS 1010 ES 1 CS 1101 ES      A float with a value of negative 0.625
  1 CS 0011 ES 1 CS 1100 ES      A float with a value of negative 0.1875

----
VI. Namespaces

  Namespaces are a hierarchical structure--namespaces are grouped via parent-child relationships--used for storing data. A namespace is represented by the conceptual opcode NMSP. Every namespace has a name, a value, and a parent namespace. A namespace's name and parent uniquely identify it. At the top of namespace hierarchy is the Global Namespace; all other namespaces either have the Global Namespace as a parent or as a more distant ancestor. Under certain circumstances, the parent of the Global Namespace may be referenced: the Global Namespace is the parent of the Global namespace.
  Initially, every namespace has a value of an empty string; however, throughout a program's execution, a namespace may be assigned another value. A namespace will maintain the value it is assigned in the form it is assigned (so if a namespace is assigned a float value, the namespace will have the value of the float--the float will not be converted to another type), however any namespace may be interpreted as any type. If a namespace is interpreted as a type other than the type of its current value, the value will be converted to the appropriate type.
  Since all statements within an Advanced Assembly program are expressed as a series of bits, a program's code is stored in a namespace as a string. When stored as a string, the string's value includes the opcodes used for describing a namespace's structure (outlined below). Any namespace can be interpreted as a fully functional Advanced Assembly program and run as such. If a namespace is run as a program and its value is not a string, then the namespace's value is converted to a string before being run. Because of this, the Global Namespace, unlike all other namespaces, does not start with an initial value of an empty string. Instead, the Global Namespace starts with a string value that contains the currently run program. When actions in Advanced Assembly are executed, the namespace that contains the binary string being interpreted as the action is considered the "Current Namespace." Every program starts with the Global Namespace as the Current Namespace. For additional details on how a namespace is executed as a program and special cases that may arise, see *Section VII.
  Namespaces can be written in two formats: absolute and relative. Absolute namespaces are prefaced by the opcode AN (0). Then the namespace consists of groups of the CN (1) opcode and a STRING. After an arbitrary amount of groups, the EN (0) opcode is encountered indicating the end of the namespace definition. After the AN opcode, the Global Namespace is referenced. Each subsequent group references the child namespace of the previously referenced namespace with the specified STRING as its name. When the EN opcode is encountered, the last referenced namespace is the namespace being referenced by the NMSP statement. Note that by including no CN and STRING groups, the Global Namespace can be referenced.

Examples:
  AN EN                                         References the Global Namespace
  AN CN CS 0000 ES EN                           References a child of the Global Namespace called "0000"
  AN CN CS 0101 ES CN CS 0000 CS 1111 ES EN     References the Global Namespace's child "0101"'s child "00001111"

  Alternatively, a namespace can be referenced by its relation to the Current Namespace. Relative namespaces are prefaced by the opcode RN (1). The the namespace consists of groups of the CN (1) opcode and a STRING, or the PN (01) opcode. After an arbitrary amount of groups, the ERN (00) opcode is encountered indicating the end of the namespace definition. After an RN opcode, the Current Namespace is identified. Each subsequent group of CN and STRING encountered references the child namespace of the previously referenced namespace with the specified STRING as its name. Alternatively, the PN opcode may be encountered in which case the parent of the last referenced namespace is referenced. When the ERN opcode is encountered the last referenced namespace is the namespace being referenced by the NMSP statement. Note that by only including the RN and ERN opcodes, the Current Namespace can be referenced.
  While absolute namespaces and relative namespaces can be used interchangeably under most circumstances, relative namespaces that are a direct child of the Current Namespace are a special case and are a separate entity from the homophonic namespace--the namespace with the same name and parent--that would be referred to absolutely. These namespaces are called "temporary namespaces." Note that the child of a child of the Current Namespace (or a more distant child) is NOT a temporary namespace. Note that before a value is assigned to a temporary namespace, references to the temporary namespace will be referred to the homophonic namespace (e.g. if a temporary namespace 0000 has not had a value assigned to it, but the homophonic namespace 0000's value is a string with the value "0101", then references to the value of the temporary namespace will evaluate to the value of the homophonic namespace: "0101" and not evaluate to the value of an unassigned namespace--an empty string; of course, if neither the temporary namespace nor the homophonic namespace have a value assigned then the value of the temporary namespace will evaluate to an empty string).
  Once a value is assigned to a temporary namespace, the value can only be accessed from the namespace that assigned the value. Not only is this value unique to the namespace that assigned it, but it is also unique to the version of the namespace that assigned it: thus allowing for recursion. For example: given the program is in the Current Namespace 0000 and the program stores a string with the value "1" in the temporary namespace 0001 (a child of namespace 0000). Then, if the program recurses and transfers execution to the beginning of namespace 0000 the new context means that the temporary namespace 0001 will have a value of an empty string (the default value) and not "1." When execution returns to namespace 0000 in the original context, the temporary namespace 0001 will regain its former value of "1." 

Examples:
  RN ERN                                  References the Current Namespace
  RN PN ERN                               References the Current Namespace's parent
  RN PN CN CS 0000 ES ERN                 References the child "0000" of the Current Namespace's parent. If the current namespace's name is "0000" then this would be referencing the Current Namespace
  RN PN CN CS 1010 ES CN CS 1111 ES ERN   References the Current Namespace's parent's child "1010"'s child "1111." If the current namespace's name is "1010," then this is referencing the temporary namespace "1111"
  RN CN CS 0101 ES ERN                    References the Current Namespace's child "0101"
  RN CN CS 1010 ES CN CS 1111 ES ERN      References the Current Namespace's child "1010"'s child "1111"

----
VII. Statements

  A statement consists of one or more operations that evaluate to a value: either an integer, float or string (strings may be used to represent namespaces; see Section VI). A complete statement is represented by the conceptual opcode STMT. Statements are broken up into two types: literal statements which evaluate to the literal value of their contents, and functional statements which evaluate to a value derived from one or more other statements.

A. Literal Statements

  Literal statements are statements that have a single input and evaluate to the literal value of that input. All literal statements start with the opcode LS (0). After the LS opcode, their are three options. The first is a string literal statement which consists of the opcode LT (0) followed by a STRING. The second option is the opcode LI (10) followed by an INT. The final option is the opcode LF (11) followed by a FLOAT. Each type of literal statement evaluates to the value delineated within the statement.

Examples:
  LS LT CS 0000 ES                    Evaluates to a string with a value of "0000"
  LS LI 0 CS 0001 ES                  Evaluates to an integer with a value of 1
  LS LF 0 CS 0001 ES 1 CS 1111 ES     Evaluates to a float with a value of 0.5

B. Functional Statements

  Functional statements are statements that have one or more inputs and evaluate to a value derived from them. All functional statements start with the opcode FS (1). Functional statements can be further divided into two categories: namespace statements which derive their value from manipulating namespaces, and mathematical statements which derive their value from a mathematical manipulation of one or more inputs.

1. Namespace Statements

  Namespace statements are the most complex statements and involve manipulating namespaces. They are also the most important section of any program and are what allow an Advanced Assembly program to make changes to the program's state. After the FS opcode, all namespace statements have the NS (0) opcode. After the NS opcode, there are three possible types of namespace statements.
  The first two types of namespace statement are relatively simple and directly manipulate the value of a namespace. An assign statement can be made using the AS (00) opcode followed by two additional statements. The first of these statements' value is converted to a string (if it is not a string already) and is then interpreted as a namespace. This namespace's value is then set to be whatever the second statement evaluates to. An assign statement evaluates to the value assigned to the namespace. The other simple namespace statement is a read statement which consists of the RS (01) opcode followed by one additional statement. This statement's value is then interpreted as a namespace (via a string). The read statement then evaluates to the value of the designated namespace.
  The final type of namespace statement is the evaluate statement. The evaluate statement is used to transfer a program's control to another namespace. The evaluate statement starts with the ET (1) opcode followed by a varying amount of statements greater than one. The value of the first statement is interpreted as a namespace (via a string). The contents of this namespace are then interpreted as a program (via a string) which will be executed. As outlined in *Section IX, the amount of inputs to be sent to the program is derived. For each of these inputs, another statement is evaluated and the value of the current input is set to the value of the statement. Therefore, if an evaluate statement's first input indicates a namespace that contains a program with zero inputs, the evaluate statement will only consist of FS NS ES STMT. However, if the evaluate statement's first input denotes a namespace that contains a program with four inputs, the evaluate statement will consist of FS NS ES STMT STMT STMT STMT STMT. Note that there are five statements: one to identify the program and then one for each input for the program.

Examples:
  FS NS AS LS LT nmsp LS LI 0 CS 0001 ES              Assigns an integer with a value of one to the namespace nmsp*. Evaluates to an integer with a value of one.
  FS NS RS LS LT nmsp                                 Evaluates to namespace nmsp*'s value.
  FS NS ET LS LT nmsp LS LT ES LS LT ES LS LT ES      Executes the program at namespace nmsp* that has three arguments. Each argument is set to an empty string. The statement evaluates to the result of the program at nmsp*.

*For simplicity's sake, rather than writing out a string that denotes a namespace verbatim, the acronym nmsp is used to denote a string that contains an arbitrary namespace. 
 
2. Mathematical Statements

  Mathematical statements are the most diverse set of statements. All mathematical statements start with the MS (1) opcode followed by one of the "operation opcodes" and then by either one or two statements. Operation opcodes are a long list of opcodes outlined below that indicate of the mathematical operations that can be performed. The first statement after the operation opcode is the first input for the operation opcode and the second statement is the second input for the operation opcode. Some operation opcodes only have one input and in that case, only one statement will be read after the operation opcode.
  If only one input is required, the result will be the same type as the input. If two inputs are required, then result is more complicated. If both inputs for an operation are of type integer, then the result will be of type integer. If both inputs are of type float, then the result will be of type float. If one input is an integer and the other a float, the integer will be converted to a float and the inputs will be handled like two floats. If one input is a string and the other an integer, the string will be converted to an integer and the inputs will be handled like two integers. If one input is a string and the other is a float, the string will be converted to a float and the inputs will be handled like two floats.  If both inputs are strings, then, in general, the strings will be converted to floats, processed accordingly, and then the result will be converted back to a float. However, in certain circumstances this behavior will be different.
  The simplest operation opcodes are OP (0000) for addition, OM (0001) for subtraction, OT (0010) for multiplication, and OD (0011) for division. The addition opcode (OP) evaluates to the sum of the two inputs. If both inputs for the addition opcode are strings, the result will be a string that is equal to the second input appended to the first input. The multiplication opcode (OM) evaluates to the product of the two inputs. The subtraction opcode (OM) evaluates to the second input subtracted from the first input. The division opcode (OD) evaluates to the quotient of the first input divided by the second input. If the second input is zero, than the result is an empty string to indicate that division by zero (a mathematically undefined situation) has occurred.
  The next two operational opcodes provide two other standard mathematical capabilities: modulus and exponentiation. The exponentiation opcode, OE (0100) evaluates to the first input raised to the power of the second input. The modulus opcode OU (0101) evaluates to the positive difference between the first input and the largest multiple of the second input less than the first input.
  The next nine operational opcodes are boolean opcodes. While there are many ways to express the boolean values true and false (see Section V), when a boolean operation evaluates to true, it will evaluate to an integer with a value of one. Similarly, when a boolean operation evaluates to false, it will evaluate to an integer with a value of zero. The eight boolean operational opcodes are as follows: boolean not, BN (0110); boolean or, BO (01110); boolean xor, BX (01111); boolean and, BA (1000); equal to, BE (1001); less than, BL (1010); less than or equal to, BLE (1011); greater than, BG (1100); and greater than or equal to, BGE (1101). Boolean not (BN) only takes one input. If the input is true, it evaluates to false; if the input is false, it evaluates to true. Boolean or (BO) evaluates to true if either of its inputs is true. Boolean or evaluates to false only if both inputs are false. Boolean xor (BX) evaluates to true if only one of the inputs is true. If both inputs are true or both inputs are false, boolean xor evaluates to false. Boolean and (BA) evaluates to true if both inputs are true. Otherwise, boolean and evaluates to false.
  The remaining boolean operators are comparison operators. Comparison operators treat two string inputs specially: first, the two inputs' lengths are compared and only if both inputs have the same length are they converted to floats and compared. A string with a smaller length is always considered smaller than a string with a larger length and vice versa. The equal to comparison operator (BE) evaluates to true if both inputs are the equivalent and false otherwise. Less than (BL) is true if the first input's numerical value is smaller than the second input's numerical value (strings are handled as outlined earlier). Less than or equal to (BLE) is true if the first input's numerical value is the same as or smaller than the second input's numerical value (strings are handled as outlined earlier). Greater than (BG) is true if the first input's numerical value is larger than the second input's numerical value (strings are handled as outlined earlier) and greater than or equal to (BGE) is true if the first input's numerical value is the same as or larger than the second input's numerical value (strings are handled as outlined earlier).
  The final nine operators are the bitwise operators: bitwise not, TN (1110); bitwise or, TO (1111000); bitwise xor, TX (1111001); bitwise and, TA (1111010); bit shift left, TL (1111011); arithmetic bit shift right, (1111100); logical bit shift right, (1111101); rotate left, TTL (1111110); and rotate right, TTR (1111111). All bitwise manipulations work on a per bit level, from left to right. Therefore, the first bits are aligned up and any discrepancies in length will occur at the end. When two strings are compared, the resulting string will have the length of the longer of the two inputs. For each bit in the longer string without a corresponding bit in the shorter string, the shorter bit will be assumed to have a value of "0." When comparing two integers, first the sign bits are compared and then the values are compared as strings. When comparing floats, each of the two composite integers are compared as previously outlined. The first bitwise operator, bitwise not (TN), only takes one input. Bitwise not evaluates to the same type as its input. For each bit that is a 1 in the input, it is changed to a 0 in the result. Bitwise or (TO) evaluates two inputs such that the output has a 1 if the corresponding bit in either input is a 1 or a 0 if both inputs have a 0 in the corresponding bit. Bitwise xor (TX) evaluates two inputs such that the output has a 1 if the corresponding bit only one input is a 1, or a 0 if both inputs have a 0 or both inputs have a 1 in the corresponding bit. Bitwise and (TA) evaluates two inputs such that the output has a 1 if the corresponding bit in both inputs is a 1 or a 0 if either inputs has a 0 in the corresponding bit.
  The remaining bitwise operators are the five bit shifts. In a bit shift, the first input can be any type and the second input will always be interpreted as an integer. The first bit shift is the left bit shift (TL); depending on the type of the first input, this operation behaves in different ways. In a string, this bit shift simply appends an amount of "0"'s equal to the absolute value of the second input, moving every other bit over one spot to the left. In an integer, each bit is shifted to the place value immediately larger than its current place value. This process is repeated as many times as the absolute value of the second input. Left bit shifting an integer increases its magnitude while rearranging the bits within the float will not yield a meaningful result. Instead of rearranging the float's bits, the float's exponent is incremented by the absolute value of the second input thus replicating the effect of bhtshifting an integer. The next two bit shifts are the arithmetic bit shift right (TRA) and the logical bit shift right (TRL). When applied to a string, both bit shifts have the same affect: they remove the last digit as many times as the absolute value of the second input--thus shifting the remaining bits to the right. When applied to an integer, an arithmetic shift right removes the least significant digit of the integer as many times as the absolute value of the second input. In the event that all of the integer's digits are removed, the next digit to be removed is the sign bit: if its value is 1, it is to be changed to 0. Any remaining digits to be removed are discarded. If the integer's string component, after removing the necessary digits, is an empty string, it is to be set to "0000." A logical bit shift right functions almost identically on an integer. The key difference is that after the first bit shift right, if the sign bit is 1, the sign bit is to be set to 0 and "1" is to be appended to the integer's string component such that it becomes the most significant digit--thus shifting the sign bit into the integer's body. Right bit shifting an integer decreases its magnitude while rearranging the bits within a float will not yield a meaningful result. Instead, the effect to an integer is replicated by decreasing the float's exponent by the absolute value of the second input. An arithmetic right bit shift will only decreases a float's exponent. However, if a float is logically bit shifted right and the float's mantissa's sign bit is 1, in addition to decreasing the exponent of the float, the float's mantissa's sign bit will also be set to 0 and 1 will be appended to the mantissa's string component in the most significant digit.
  The final two bit shifts are rotate bit shifts. Rotate left (TTL) affects strings, integers, and floats differently. When applied to a string, a rotate left operation will take the first bit of the string and move it to be the last so that all of the bits are preserved, but they are re-ordered. This process is repeated as many times as the absolute value of the second input. When applied to an integer, the integer's most significant digit is moved to the integer's sign bit and the integer's sign bit is moved to its least significant digit. This process is repeated as many times as the absolute value of the second input. When applied to a float, the mantissa's most significant digit is shifted to the mantissa's sign bit, the mantissa's sign bit is shifted to the exponent's least significant digit, the exponent's most significant digit is shifted to the exponent's sign bit, and the exponent's sign bit is shifted to the mantissa's least significant digit. This process is repeated as many times as the absolute value of the second input. Similarly, a rotate right (TTR) affects strings, integers, and floats differently. When applied to a float, a rotate right will take the last bit of the string and move it to the first. This process is repeated as many times as the absolute value of the second input. When applied to an integer, the sign bit is moved to the most significant digit and the least significant digit is moved into the sign bit. This process is repeated as many times as the absolute value of the second input. When applied to a float, the mantissa's sign bit is moved to the mantissa's most significant digit, the mantissa's least significant digit is moved to the exponent's sign bit, the exponent's sign bit is moved to the exponent's most significant digit, and the exponent's least significant digit is moved to the mantissa's sign bit. This process is repeated as many times as the absolute value of the second input.

----
VIII. Actions
  An action is the highest level form of instruction in an Advanced Assembly program and is represented by the conceptual opcode ACTN. There are four types of actions: return, statement, if, and while. The first type of action, the return action, consists of the opcode RT (00) followed by a statement. The return action evaluates the specified statement and then terminates the execution of the current namespace. Program execution then returns to the evaluate statement that initiated the execution of the current namespace. The evaluate statement evaluates to the value of the return action’s statement. If a return statement is found in the global namespace, then it causes program execution to stop with the return action’s statement’s value as the program’s exit code. The second type of action is the statement action. The statement action consists of the opcode ST (01) followed by a statement. The statement action simply evaluates the subsequent statement. The third type of action is the if action. The if action consists of the opcode IF (10) followed by two statements and either the opcode EN (0) - indicating the end of the if action - or the opcode EL (1) and a third, final statement. The if action starts by evaluating the first statement. If the first, conditional statement evaluates to true, then the second statement is executed, otherwise the second statement is discarded. If the conditional statement evaluates to false and there is a third statement (specified by the EL opcode), the third statement will be executed. The final type of action, the while action, consists of the opcode WH (11) followed by two statements. The while action starts by evaluating the first statement. If the statement evaluates true, then the second statement is executed, otherwise the while action terminates. After evaluating the second statement, the while action re-evaluates the first action. If the first statement is still true, then the second statement will be executed yet again. The while action will keep alternating between evaluating the first statement and the second statement until the first statement evaluates false. Once the first statement evaluates false, then the while action will end.

----
IX. Program Control Flow
  Program execution in Advanced Assembly is relatively simple. When executing a program, the first series of bits are interpreted as an integer (See Section V.A). The absolute value of this integer is the number of parameters for the program being interpreted. The value of the parameters are put in the temporary namespaces with a string whose value can be interpreted as an integer that matches with the parameter’s index. Therefore the first parameter (parameter zero) is stored in the temporary namespace "0000", the second parameter is in the temporary namespace "0001", and so forth. Note that the used namespaces always have the most concise names, so the first parameter will always be in  "0000" even if there is a parameter seventeen in "00010000". After the initial integer, all subsequent bits are interpreted as actions. Following the initial integer, there can be an infinite amount of actions which will be interpreted sequentially until a return statement is encountered ending execution. If the series of bits being interpreted ends, then there is an assumed infinite amount of zeroes following which will be used to continue the execution of the program until a return statement is encountered.

----
Appendix A. Opcodes

  This section consists of a list of all opcodes and their values. The opcodes are grouped by the section they are explained in.

  Strings (Section IV)
ES                 0
CS                 1

  Namespaces (Section VI)
AN                 0
RN                 1
EN                 0
CN                 1
ERN                00
PN                 01

  Statements (Section VII)
LS                 0
LT                 0
LI                 10
LF                 11
FS                 1
NS                 0
AS                 00
RS                 01
ET                 1
MS                 1

  Operation Opcodes (Section VII.B.2)
OP                 0000
OM                 0001
OT                 0010
OD                 0011
OE                 0100
OU                 0101
  Boolean Operation Opcodes
BN                 0110 
BO                 01110
BX                 01111
BA                 1000
BE                 1001
BL                 1010
BLE                1011
BG                 1100
BGE                1101
  Bitwise Operation Opcodes
TN                 1110
TO                 1111000
TX                 1111001
TA                 1111010
TL                 1111011
TRA                1111100
TRL                1111101
TTL                1111110
TTR                1111111

  Actions
RT                 00
ST                 01
IF                 10
EN                 0
EL                 1
WH                 11

----
Appendix B. Conceptual Opcodes

  STRING             Represents a string. See Section IV
  INT                Represents an integer. See Section V.A
  FLOAT              Represents a float. See Section V.B
  NMSP               Represents a namespace. See Section VI
  STMT               Represents a complete statement. See Section VII

----
Appendix C. Compiler Notes

----
Appendix D. Memory Management Notes