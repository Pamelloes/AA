================================================================
==   ADVANCED ASSEMBLY LANGUAGE SPECIFICATION VERSION 0.5.0   ==
================================================================

----
I. Preface

  Advanced Assembly is a programming language that roughly resembles an assembly programming language. However, unlike standard assembly languages, Advanced Assembly is not designed to be run on a specific processor. Instead, it has been designed so that any series of bits--any combination of "1" and "0"--is a valid program.
  Advanced Assembly discards the conventional grouping of eight bits into a byte; instead, bits are divided into groups of arbitrary length. This makes it impossible to run an Advanced Assembly program directly on a processor, but allows instructions to be packed much more densely. Therefore, Advanced Assembly programs must be run in an interpreter. The official Advanced Assembly interpreter, programmed in Haskell, should be included with this document.
  During early stages of development, Advanced Assembly was called High Level Binary and  was intended to be able to express a diverse range of paradigms found in high level programming languages. However, as development progressed, it became apparent that such paradigms lead to a complex and convoluted syntax. In order to simplify the syntax, all complex paradigms that could be easily implemented through simpler paradigms were removed.
  When the first complete language specification was planned out, High Level Binary no longer represented the "high level" programming languages it was originally intended to emulate; instead, the programming language appeared to be a permutation of a typical assembly language. Therefore, the decision was made to rename the language Advanced Assembly to indicate that it facilitated a different feature set than standard assembly languages while distancing the association with the more advanced high level programming languages.
  Advanced Assembly's simplification led to the removal of several essential features. These features, such as the Object Oriented Programming paradigm, will therefore be provided as "extensions." Separate specification documents will be drafted that define how these features are to work and a reference implementation of them shall be created solely using Advanced Assembly code. Therefore in a program where one of these features is desired, the extension can be used by invoking the extension as one of the first actions of a program. All subsequent statements will than have access to the now-loaded extension's feature set. As of the writing of this document, no extensions have been drafted or implemented.
  
----
II. Table of Contents

  I.             Preface
  II.            Table of Contents
  III.           Notation
   A.             Opcodes
   B.             Conceptual Opcodes
  IV.            Data Types
   A.             Strings
   B.             Integers
   C.             Rationals
  V.             Namespaces
   A.             Namespace Identifiers
   B.             Temporary Namespaces
  VI.            Statements
   A.             Literal Statements
   B.             Functional Statements
    1.             Control Statements
    2.             Mathematical Statements
   C.             Input/Output Statements
  VII.          Program Control Flow

  Appendix A.    Opcodes
  Appendix B.    Conceptual Opcodes
  Appendix C.    Change Log
  Appendix D.    Memory Management Notes

----
III. Notation

  Advanced Assembly programs consist of a series of bits. A bit, the simplest unit of information, can either be true or false. Throughout this document it is understood that "1" and "0" refer to a single bit with a value of true and false, respectively. All other Arabic numerals are understood to be referring to their standard numeric value. If a "1" or "0" is used with other Arabic numerals, it is understood that the "1" or "0" represents its standard numeric value--not a bit.
  Under some circumstances, expressing numbers (such as one hundred) in Arabic numerals will only use the symbols "1" and "0". In such cases, the number will be written out ("one hundred"). Therefore, if "100" is encountered it is understood that "100" is referring to three, sequential bits with values of true, false, and false, respectively.

Examples:
     0  Refers to a bit with a value of false
     8  Refers to the number eight
    10  Refers to two, sequential bits with values of true and false respectively
    15  Refers to the number fifteen
  1425  Refers to the number one thousand, four hundred, twenty-five
  1001  Refers to four, sequential bits with values of true, false, false, and true respectively

NOTE: In other documents, series of bits may be grouped into sets of four and expressed in hexadecimal--allowing two hexadecimal digits to express the value of a byte. However, since Advanced Assembly does not group bits into larger groups of regular size, this notation will not be used. Whenever series of bits are to be expressed, they will be expressed using "1" and "0".

A. Opcodes

  This document explicitly specifies how combinations of true and false bits can be interpretted to produce a desired effect. However, notating a bit solely as "0" or "1" can become confusing as the same combinations of bits mean different things in different places. Therefore, when defining various functions, bit patterns will be expressed via several character mnemonics. Each mnemonic directly translates to a corresponding series of bits (see Appendix A) and provides additional context--making a program easier to understand. These mnemonics are referred to as opcodes.
  An assembler (written in Python) should be included with this document. The assembler will take a text file consisting of "1", "0", and the opcodes defined in this document and translate the text file into a binary file whose bits correspond with the text file.

B. Conceptual Opcodes

  In Advanced Assembly, groups of opcodes are used in conjunction with arbitrary series of bits in predictable patterns to express complex concepts. These concepts, such as strings, often come up in multiple places throughout the specification where it is more meaningful to refer to the concepts by a short mnemonic than it is to refer to the concepts by their constituent parts. These mnemonics are collectively referred to as "Conceptual Opcodes" because they refer to concepts instead of specific series of bits. Conceptual opcodes are used within this document for clarity and cannot be used by a programmer to write an Advanced Assembly program. Conceptual Opcodes are defined throughout the specification and a complete list can be found in Appendix B.


----
IV. Data Types

  Within Advanced Assembly, a series of arbitrary bits can interpreted in five distinct ways: as a string, as an integer, as a rational, as a namespace identifier, and as a statement. Each way of interpreting a series of bits is considered a data type.
  When a bit series is defined, it is assigned a data type based off of context. While a bit series' data type does not affect the series' contents, it determines how the series will be interpreted when the series can be interpreted in several ways.
  Each data type defines a specific process for interpreting a bit series. The process does not take into account how long the bit series is. Oftentimes, therefore, a different amount of bits will be used when interpreting the series than the series contains. If fewer bits are required, than the remaining bits are ignored. If additional bits are required, then all additional bits are assumed to be 0. Note that this does not effect the contents of the series itself--just the interpretation.
  For instance, a series interpreted as a string might have seven unused bits. Then, the same series might be interpreted as an integer and have 4 unused bits. The three additional bits used when interpreting the series as an integer come from the unused bits when interpreting the series as a string. Unused bits are still part of the series, even if they don't affect the current value. Similarly, if a series interpreted as a namespace requires five additional bits and then the series is interpreted as a string with three extra bits, the three extra bits do not include the five 0 bits used when interpreting the series as a namespace. Additional bits are not part of the series, even if they are needed to calculate the current value.
  Under some circumstances, bit series must be interpreted in a boolean matter (true or false). The values considered false are: an empty string, an integer equal to zero, a rational equal to zero, the global namespace, and an empty statement. All other values are considered true.

A. String

  The string data type, notated by the conceptual opcode STR, interprets a series of bits as a series of bits. Within a string, the opcode CS (1) indicates that the next four bits are part of the string's value while the opcode ES (0) indicates the end of the string. A string can have an arbitrary amount of CS segments, but once an ES is reached, the string ends. A bit series notated by a string will have a length with a multiple of four. A string consisting solely of ES will be an empty string--a string with a length of zero.

Examples:
  ES                                      An empty string (the string has a length of zero)
  CS 1001 ES                              A string with a length of four and a value of 1001
  CS 0001 CS 0010 CS 0100 CS 1000 ES      A string with a length of 16 and a value of 0001001001001000

B. Integer

  The integer data type, notated by the conceptual opcode INT, represents a mathematical integer: any real, whole number. Within an integer, the first bit is the integer's sign and the remaining bits are a string. The string is the integer's value and is interpreted in a little-endian style: the first group of four bits represents the eights, fours, twos, and ones place values respectively; the second group of four bits represents the one hundred twenty-eights, sixty-fours, thirty-twos, and sixteens place values respectively; and so forth. A positive integer has a 0 sign bit and its value is the value of its string component. A negative integer has a 1 sign bit and its value is the two's compliment of its string component: the positive value of the integer is calculated by replacing every 1 with 0 (and vice versa) and incrementing the resulting integer.

Examples:
  0 ES                                       An integer with a value of zero
  0 CS 1001 CS 0001 ES                       An integer with a value of 25
  0 CS 0000 CS 0000 CS 0000 CS 0010 ES       An integer with a value of 8192
  1 ES                                       An integer with a value of negative one
  1 CS 1110 ES                               An integer with a value of negative two
  1 CS 1111 CS 1000 ES                       An integer with a value of negative 113

C. Rational

  The rational data type, notated by the conceptual opcode RTNL, represents a rational number: any number that can be expressed as the quotient of two integers. Within a rational, the bits are interpreted as two subsequent integers: the first integer is the numerator and the second the denominator. Standard conventions are used when dealing with signs: if the numerator and denominator are the same sign, the rational is positive; if the numerator and denominator are opposite signs, the rational is negative.
  Because a rational involves division, it is possible to divide by zero. A division by zero is undefined, and to indicate this the rational's value will be set to zero divided by zero. Any mathematical operation performed on zero divided by zero will result in zero divided by zero.

Examples:
  0 ES 0 ES                      A rational with a value of zero divided by zero
  1 CS 1111 ES 0 ES              A rational with a value of zero divided by zero
  0 CS 0001 ES 0 CS 1000 ES      A rational with a value of one divided by eight
  0 ES 0 CS 1010 ES              A rational with a value of zero
  0 CS 1111 ES 0 CS 1010 ES      A rational with a value of 15/10
  0 CS 1010 ES 1 CS 1110 ES      A rational with a value of negative 10/2
  0 CS 0101 ES 1 CS 1000 ES      A rational with a value of negative 5/8
  1 CS 1010 ES 0 CS 1101 ES      A rational with a value of negative 6/13
  1 CS 0011 ES 0 CS 1100 ES      A rational with a value of negative 13/12

----
V. Namespaces

  Namespaces are a hierarchical structure used for storing data. Every namespace has a name, a bit series value, and a set of children namespaces. The Global Namespace is the top of the namespace hierarchy; all other namespaces are ultimately children of the Global Namespace: if not a direct child, then a child of a child, or a more distant relationship.
  Every possible namespace is assumed to always exist. Initially, every namespace's value is assumed to be an empty bit series with a data type of string. But, throughout a program's execution, namespaces may be assigned other values. Once assigned, a namespace will retain its value and its value's data type until assigned another value.
  The Global Namespace's initial value is the code being executed. The Global Namespace's initial data type is a statement. When a namespace with a data type of statement is executed, the namespace that contains the binary string being executed is considered the "Current Namespace." Every program starts with the Global Namespace as the Current Namespace. For additional details on how a namespace is executed and special cases that may arise, see *Section VII.

A. Namespace Identifiers

  Namespaces can be specified by the Namespace Identifiers data type. Namespace Idenitifiers, notated by the conceptual opcode NMSP, are written in two formats: absolute and relative. Within a namespace identifier, the first bit determines the id's type. Absolute identifiers start with the opcode AN (0). Within the remaining bits, the opcode CN (1) indicates the following bits are a string and the EN (0) opcode indicates the end of the id. An absolute id starts at the Global Namespace, and each following string identifies the child of the previously identified namespace with a name equal to the string.

Examples:
  AN EN                                         References the Global Namespace
  AN CN CS 0000 ES EN                           References a child of the Global Namespace called "0000"
  AN CN CS 0101 ES CN CS 0000 CS 1111 ES EN     References the Global Namespace's child "0101"'s child "00001111"

  Relative namespaces identifiers start with the opcode RN (1). Within the remaining bits, the opcode CN (1) indicates the following bits as a string, the PN (01) opcode, and the ERN (00) opcode indicates the end of the id. A relative id starts at the Current Namespace, and each following string identifies the child of the previously identified namespace with a name equal to the string. In addition, the PN opcode identifies the parent of the previously identified namespace.

Examples:
  RN ERN                                  References the Current Namespace
  RN PN ERN                               References the Current Namespace's parent
  RN PN CN CS 0000 ES ERN                 References the child "0000" of the Current Namespace's parent. If the Current Namespace's name is "0000" then this would be referencing the Current Namespace
  RN PN CN CS 1010 ES CN CS 1111 ES ERN   References the Current Namespace's parent's child "1010"'s child "1111." If the Current Namespace's name is "1010," then this is referencing the Current Namespace's child "1111"
  RN CN CS 0101 ES ERN                    References the Current Namespace's child "0101"
  RN CN CS 1010 ES CN CS 1111 ES ERN      References the Current Namespace's child "1010"'s child "1111"

----
VI. Statements

  The statement data type is used to detail one or more actions that evaluate to a value. A complete statement is represented by the conceptual opcode STMT. Statements are broken up into three types: literal statements, which evaluate to the literal value of their contents; functional statements, which evaluate to a value derived from one or more other statements; and Input/Output statements, which pass a value out of the program and get a response.
  In addition, statements can be grouped as embedded and executable statements. Embedded statements are found within a larger statement and have no special features. Executable statements are "top-level" statements, they are not embedded in any other statement and are run directly. Furthermore, all executable statements are prefaced by an integer. The absolute value of this integer is the number of parameters for the executable statement. The Current Namespace when the executable statement will be executed is called the Destination Namespace. The value of parameters are stored in children of the Destination Namespace. Parameters are stored in the children namespaces of the Destination Namespace. Each parameter's index is interpretted as a string and used as the name of the namespace that the parameter's value is stored in. Parameters' indexes are zero-based, so the first parameter will be stored in "0 ES", the second in "0 CS 0001 ES", and so forth. 

A. Literal Statements

  Literal statements have a single input and evaluate to the literal value of that input. Literal statements start with the opcode LS (0). After the LS opcode, there are five options: the opcode LT (00) followed by a string, the opcode LI (01) followed by an an integer, the opcode LR (10) followed by a rational, the opcode LN (110) followed by a namespace identifier, and the opcode LM (111) followed by a statement. Note that a literal statement with the LP opcode does not evaluate to the value of the statement, but to the bit series that the statement is made up of.

Examples:
  LS LT CS 0000 ES                    Evaluates to a string with a value of "0000"
  LS LI 0 CS 0001 ES                  Evaluates to an integer with a value of 1
  LS LR 0 CS 0001 ES 1 CS 1111 ES     Evaluates to a rational with a value of negative 1/1
  LS LN AN EN                         Evaluates to the Global Namespace
  LS LM 0 CS 0001 ES LS LT CS ES      Evaluates to the statement "LS LT CS ES" with one parameter

B. Functional Statements

  Functional statements derive a value from one or more inputs. Functional statements start with the opcode FS (1). Functional statements can be divided into two categories: control statements and mathematical statements.

1. Control Statements

  Control statements serve two purposes: to manipulate namespaces' values and to conditionally execute statements. Control statements begin, after the FS opcode, with the TS (0) opcode.
  The first two control statements directly manipulate the value of a namespace. The assign statement consists of the AS (00) opcode followed by two statements. The first statements' value is interpeted as a namespace id. The value of the namespace identified by the first statement is set to the result of the second statement. An assign statement evaluates to the value assigned to the namespace.
  The read statement consists of the RS (01) opcode followed by one statement. This statement's value is interpreted as a namespace id. The read statement evaluates to the value of the namespace identified by the statement.
  The evaluate statement consists of with the ET (100) opcode followed by one or more statements. The first statement is interpreted as a namespace id. The identified namespace is then interpreted as an executable statement and executed. The remaining statements are the values of the executable statement's parameters. There is one statement per parameter. For instance, if the indicated namespace contains an executable statement with zero parameters, the evaluate statement will only have one statement and if the indicated namespace contains an executable statement with with four parameters, the evaluate statement will have five statements.

Examples:
  FS TS AS LS LN NMSP LS LI INT            Sets the value of NMSP to INT
  FS TS RS LS LN NMSP                      Evaluates to the value of NMSP
  FS TS ET LS LN NMSP STMT STMT STMT       Interprets NMSP as an executable statement and executes it. The executable statement has three inputs, and each one is specified by an STMT. This statement evaluates to the result of the executable statement

  The next three statements execute statements sequentially. The sequence statement consists of the SQ (101) opcode followed by two statements. The sequence statement evaluates the first statement, discards its value, and then evaluates to the value of the second statement.
  The if statement consists of the IF (110) opcode followed by three statements. The if statement starts by evaluating the first statement. If it evaluates to true, then the if statement evaluates to the value of the second statement. Otherwise, the if statement evaluates to the value of the third statement.
  Finally, the do while statement consists of the DW (111) opcode followed by two statements. The do while statement starts by evaluating the first statement. Then, if the second statement evaluates to false, the while loop evaluates to the value of the previously executed first statement. Otherwise, the value of the first statement is discarded and the process is executed again. Thus, the first statement will keep being executed as long as the second statement evaluates to true. Once the second statement evaluates to false, the do while statement evaluates to the value of the first statement in the current iteration.

Examples:
  FS TS SQ STMT LS LI 0 ES                  Evaluates STMT and then evaluates "LS LI 0 ES", ultimately evaluating to an integer with a value of zero
  FS TS IF STMT LS LI 0 ES LS LI 1 ES       Evaluates to the integer zero if STMT is true, and the integer negative one otherwise.
  LS TS DW FS TS RS LS LN NMSP STMT         Reads the value at NMSP as long as STMT is true. Evaluates to the last-read value of at NMSP once STMT evaluates to false

2. Mathematical Statements

  Mathematical statements consist of, after the FS opcode, the MS (1) opcode followed by an "operation opcode" and one or two statements. The operation opcodes, defined below, specify the mathematical operation used to derive an output value from the inputs. The two statements represent the first and second input, respectively. Some operations only require one input and will only have one following statement.
  All mathematical statements can only process homogenous inputs--inputs of the same data type. The result of a statement with homogenous input will have the same data type as the input. When faced with heterogenous inputs--inputs of varying data types--all the inputs must be interpreted as the same data type. The data type used with heterogenous inputs is determined by the order of precedence (from highest to lowest): rational, integer, string, namespace identifier, statement. The statement's result's data type will be the highest-precedent input data type. For example: if a statement's inputs are an integer and a namespace identifier, the inputs will be interpreted as integers and the statement's result will be an integer.
  Some operations can only handle numerical input--integers or rationals. If the highest-precedence input data type of a numerical-only statement is not numerical, then the inputs will be processed as if they were rationals. The output will be converted from rational to the highest-precedent input data type.
  Addition's operation opcode is OP (0000). Addition takes two, numerical inputs and evaluates to the sum of both inputs. When provided two strings, however, addition evaluates to the second string concatenated to the first string. Subtraction's operation opcode is OM (0001); subtraction takes two, numerical inputs and evaluates to the difference of the second input subtracted from the first input. Multiplication's operation opcode is OT (0010); multiplication takes two, numerical inputs and evaluates to the product of both inputs. Division's operation opcode is OD (0011); division takes two, numerical inputs and evaluates to the quotient of the first input divided by the second input. When dividing integers, the result is rounded down. If the second input, the divisor, is equal to zero, the statement will evaluate to the rational zero divided by zero (see Section V.B).

Examples:
  FS MS OP LS LI 0 CS 0010 ES LS LR 0 CS 1000 ES 0 CS 0011 ES        Adds two (integer) and eight thirds (rational) to fourteen thirds (rational)
  FS MS OM LS LI 0 CS 0001 ES LS LI 0 CS 0101 ES                     Subtracts one (integer) from five (integer) to four (integer)
  FS MS OT LS LR 1 ES 0 CS 0010 ES LS LR 0 CS 1000 ES 0 CS 0001 ES   Multiplies negative one half (rational) and eight (rational) to negative four (rational)
  FS MS OD LS LI 0 CS 1000 ES LS LI 0 CS 0011 ES                     Divides eight (integer) by three (integer) to two (integer)
  FS MS OD LS LI 1 CS 1010 CS 1110 ES LS LI 0 ES                     Divides negative 22 (integer) by zero (integer) to zero divide by zero (rational).

  Exponentiation's opcode is OE (0100); exponentiation takes two inputs--the first input is numerical and the second input will always be interpreted as an integer--and evaluates to the first input raised to the power of the second input. Modulus's opcode is OU (0101); modulus takes two, numerical inputs and evaluates to the the smallest positive value of a multiple of the second input being subtracted from the first input. If the second input, the divisor, is equal to zero, the statement will evaluate to the rational zero divided by zero (see Section V.B).
  
Examples:
  FS MS OE LS LI 0 CS 0010 ES LS LI 0 CS 1000 ES                Raises two (integer) to the eighth (integer) powere to 256 (integer)
  FS MS OE LS LR 1 ES 0 CS 0010 ES LS LI 0 CS 0010 ES           Raises negative one half (rational) to the second (integer) power to one fourth (rational)
  FS MS OU LS LI 0 CS 1010 ES LS LI 0 CS 0011 ES                Calculates ten (integer) modulo three (integer) to one (integer)
  FS MS OU LS LI 1 CS 0000 ES LS LR 0 CS 1011 ES 0 CS 0011 ES   Calculates negative 32 (integer) modulus seven thirds (rational) to two thirds (rational).
  FS MS OU LS LI 1 CS 1011 ES LS LI 0 ES                        Calculates negative five (integer) modulus zero (integer) to zero divide by zero (rational).

  Boolean operators evaluate inputs to a boolean value--true or false. There are multiple ways of expressing true and false (see Section IV); in order to determine which version of true and false to use, boolean operators follow the previously defined data type restrictions. False will be expressed in the one outlined method per data type; true will be expressed as follows: the statement "1", the namespace identifier "AD CN ES EN", the string "ES", the integer "0 CS 0001 ES", and the rational "1 ES 1 ES".
  Boolean not's opcode is BN (0110); boolean not takes one input. If the input is false, boolean not evaluates to true; if the input is true, boolean not evaluates to false. Boolean or's opcode is BO (01110); boolean or takes two inputs and evaluates to true if either input is true. Otherwise, boolean or evaluatates to false. Boolean exclusive or's opcode is BX (01111); boolean exclusive or takes two inputs and evaluates to true if exactly one input is true. Otherwise, boolean exclusive or evaluates to false. Boolean and's opcode is BA (1000); boolean and takes two inputs and evaluates to true if both arguments are true. Otherwise, boolean and evaluates to false.
  Equal's opcode is BE (1001); equal takes two inputs and evaluates to true if both inputs are an equivalent value. Otherwise, equal evaluates to false. Numerical inputs are equal if they refer to the same rational number; strings are equal if they refer to strings of the same length with the same contents; namespace identifiers are equal if, with respect to the Current Namespace, they refer to the same namespace; and statements are equal if they refer to the exact same bit series. Less than's opcode is BL (1010); less than takes two inputs and evaluates to true if the first input's value is considered smaller than the second input's value. Otherwise, less than evaluates to false. If two values are equal, then neither value is less than the other. One numerical input is smaller than another if the first input's numerical value is less than the second input's numerical value. Strings and statements are compared the same way: one input is less than another if the first bit with a different value in each input is a 0 in the first input and a 1 in the second input. If the inputs are different lengths but are identical among the shared bits, the first input is smaller than the second input if the first input's length is smaller than the second input's length. When comparing two namespaces identifiers, both identifiers are compared as if they were absolute namespace identifiers. If the first identifier is a parent of the second identifier, the first identifier is less than the second identifier. Otherwise, the first input is smaller if the first differing string component between the two identifiers is smaller in the first input than the second input.

  The final nine operators are the bitwise operators: bitwise not, TN (1110); bitwise or, TO (1111000); bitwise xor, TX (1111001); bitwise and, TA (1111010); bit shift left, TL (1111011); arithmetic bit shift right, (1111100); logical bit shift right, (1111101); rotate left, TTL (1111110); and rotate right, TTR (1111111). All bitwise manipulations work on a per bit level, from left to right. Therefore, the first bits are aligned up and any discrepancies in length will occur at the end. When two strings are compared, the resulting string will have the length of the longer of the two inputs. For each bit in the longer string without a corresponding bit in the shorter string, the shorter bit will be assumed to have a value of "0." When comparing two integers, first the sign bits are compared and then the values are compared as strings. When comparing rationals, each of the two composite integers are compared as previously outlined. The first bitwise operator, bitwise not (TN), only takes one input. Bitwise not evaluates to the same type as its input. For each bit that is a 1 in the input, it is changed to a 0 in the result. Bitwise or (TO) evaluates two inputs such that the output has a 1 if the corresponding bit in either input is a 1 or a 0 if both inputs have a 0 in the corresponding bit. Bitwise xor (TX) evaluates two inputs such that the output has a 1 if the corresponding bit only one input is a 1, or a 0 if both inputs have a 0 or both inputs have a 1 in the corresponding bit. Bitwise and (TA) evaluates two inputs such that the output has a 1 if the corresponding bit in both inputs is a 1 or a 0 if either inputs has a 0 in the corresponding bit.
  The remaining bitwise operators are the five bit shifts. In a bit shift, the first input can be any type and the second input will always be interpreted as an integer. The first bit shift is the left bit shift (TL); depending on the type of the first input, this operation behaves in different ways. In a string, this bit shift simply appends an amount of "0"'s equal to the absolute value of the second input, moving every other bit over one spot to the left. In an integer, each bit is shifted to the place value immediately larger than its current place value and a 0 is inserted into the least significant bit. This process is repeated as many times as the absolute value of the second input. Left bit shifting a rational left bit shifts the rational's numerator. The next two bit shifts are the arithmetic bit shift right (TRA) and the logical bit shift right (TRL). When applied to a string, both bit shifts have the same affect: they remove the last digit as many times as the absolute value of the second input--thus shifting the remaining bits to the right. When applied to an integer, an arithmetic shift right removes the least significant digit of the integer as many times as the absolute value of the second input. In the event that all of the integer's digits are removed, the next digit to be removed is the sign bit: if its value is 1, it is to be changed to 0. Any remaining digits to be removed are discarded. A logical bit shift right functions almost identically on an integer. The key difference is that after the first bit shift right, if the sign bit is 1, the sign bit is to be set to 0 and "1" is to be appended to the integer's string component such that it becomes the most significant digit--thus shifting the sign bit into the integer's body. When a right bit shift is applied to a rational, the rational is first convertted so that a positive rational's numerator and denominator are positive and a negative rationals' numerator is negative and denominator is positive. Then, the right bit shift is applied to the rational's numerator as previously outlined.
  The final two bit shifts are rotate bit shifts. Rotate left (TTL) affects strings, integers, and rationals differently. When applied to a string, a rotate left operation will take the first bit of the string and move it to be the last so that all of the bits are preserved, but they are re-ordered. This process is repeated as many times as the absolute value of the second input. When applied to an integer, the integer's most significant digit is moved to the integer's sign bit and the integer's sign bit is moved to its least significant digit. This process is repeated as many times as the absolute value of the second input. When applied to a rational, the numerator's most significant digit is shifted to the numerator's sign bit, the numerator's sign bit is shifted to the denominator's least significant digit, the denominator's most significant digit is shifted to the denominator's sign bit, and the denominator's sign bit is shifted to the numerator's least significant digit. This process is repeated as many times as the absolute value of the second input. Similarly, a rotate right (TTR) affects strings, integers, and rationals differently. When applied to a string, a rotate right will take the last bit of the string and move it to the first. This process is repeated as many times as the absolute value of the second input. When applied to an integer, the sign bit is moved to the most significant digit and the least significant digit is moved into the sign bit. This process is repeated as many times as the absolute value of the second input. When applied to a rational, the numerator's sign bit is moved to the numerator's most significant digit, the numerator's least significant digit is moved to the denominator's sign bit, the denominator's sign bit is moved to the denominator's most significant digit, and the denominator's least significant digit is moved to the numerator's sign bit. This process is repeated as many times as the absolute value of the second input.

----
VII. Program Control Flow

----
Appendix A. Opcodes

  This section consists of a list of all opcodes and their values. The opcodes are grouped by the section they are explained in.

  Strings (Section IV)
ES                 0
CS                 1

  Namespaces (Section VI)
AN                 0
RN                 1
EN                 0
CN                 1
ERN                00
PN                 01

  Statements (Section VII)
LS                 0
LT                 00
LI                 01
LR                 10
LN                 110
LM                 111
FS                 1
TS                 0
AS                 00
RS                 01
ET                 100
SQ                 101
IF                 110
DW                 111
MS                 1

  Operation Opcodes (Section VII.B.2)
OP                 0000
OM                 0001
OT                 0010
OD                 0011
OE                 0100
OU                 0101
  Boolean Operation Opcodes
BN                 0110 
BO                 01110
BX                 01111
BA                 1000
BE                 1001
BL                 1010
BLE                1011
BG                 1100
BGE                1101
  Bitwise Operation Opcodes
TN                 1110
TO                 1111000
TX                 1111001
TA                 1111010
TL                 1111011
TRA                1111100
TRL                1111101
TTL                1111110
TTR                1111111

----
Appendix B. Conceptual Opcodes

  STR                Represents a string. See Section IV.A
  INT                Represents an integer. See Section IV.B
  RTNL               Represents a rational. See Section IV.C
  NMSP               Represents a namespace. See Section V
  STMT               Represents a complete statement. See Section VI

----
Appendix C. Change Log

0.4.1
- Replaced Float with Rational, syntax remains unchanged
0.4
- First complete specification

----
Appendix D. Memory Management Notes